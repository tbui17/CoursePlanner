// <auto-generated />
using System;
using Lib.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lib.Migrations
{
    [DbContext(typeof(DbCtx))]
    [Migration("20240626014347_Seed")]
    partial class Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Lib.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectiveAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformanceAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ObjectiveAssessmentId")
                        .IsUnique();

                    b.HasIndex("PerformanceAssessmentId")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 4,
                            Name = "Course 1",
                            ObjectiveAssessmentId = 1,
                            PerformanceAssessmentId = 1,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 5,
                            Name = "Course 2",
                            ObjectiveAssessmentId = 2,
                            PerformanceAssessmentId = 2,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 3,
                            Name = "Course 3",
                            ObjectiveAssessmentId = 3,
                            PerformanceAssessmentId = 3,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 4,
                            Name = "Course 4",
                            ObjectiveAssessmentId = 4,
                            PerformanceAssessmentId = 4,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 5,
                            Name = "Course 5",
                            ObjectiveAssessmentId = 5,
                            PerformanceAssessmentId = 5,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 3,
                            Name = "Course 6",
                            ObjectiveAssessmentId = 6,
                            PerformanceAssessmentId = 6,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 4,
                            Name = "Course 7",
                            ObjectiveAssessmentId = 7,
                            PerformanceAssessmentId = 7,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 5,
                            Name = "Course 8",
                            ObjectiveAssessmentId = 8,
                            PerformanceAssessmentId = 8,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 3,
                            Name = "Course 9",
                            ObjectiveAssessmentId = 9,
                            PerformanceAssessmentId = 9,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 4,
                            Name = "Course 10",
                            ObjectiveAssessmentId = 10,
                            PerformanceAssessmentId = 10,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 5,
                            Name = "Course 11",
                            ObjectiveAssessmentId = 11,
                            PerformanceAssessmentId = 11,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            End = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 3,
                            Name = "Course 12",
                            ObjectiveAssessmentId = 12,
                            PerformanceAssessmentId = 12,
                            Start = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Lib.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            UserId = 2,
                            Value = "This is a note for Course 1."
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            UserId = 1,
                            Value = "This is a note for Course 2."
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            UserId = 2,
                            Value = "This is a note for Course 3."
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            UserId = 1,
                            Value = "This is a note for Course 4."
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            UserId = 2,
                            Value = "This is a note for Course 5."
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            UserId = 1,
                            Value = "This is a note for Course 6."
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            UserId = 2,
                            Value = "This is a note for Course 7."
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            UserId = 1,
                            Value = "This is a note for Course 8."
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            UserId = 2,
                            Value = "This is a note for Course 9."
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            UserId = 1,
                            Value = "This is a note for Course 10."
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 11,
                            UserId = 2,
                            Value = "This is a note for Course 11."
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 12,
                            UserId = 1,
                            Value = "This is a note for Course 12."
                        });
                });

            modelBuilder.Entity("Lib.Models.ObjectiveAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ObjectiveAssessments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2020, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 1",
                            Start = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(2020, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 2",
                            Start = new DateTime(2020, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(2020, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 3",
                            Start = new DateTime(2020, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(2020, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 4",
                            Start = new DateTime(2020, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            End = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 5",
                            Start = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            End = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 6",
                            Start = new DateTime(2020, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            End = new DateTime(2020, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 7",
                            Start = new DateTime(2020, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            End = new DateTime(2020, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 8",
                            Start = new DateTime(2020, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            End = new DateTime(2020, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 9",
                            Start = new DateTime(2020, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            End = new DateTime(2020, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 10",
                            Start = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            End = new DateTime(2020, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 11",
                            Start = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            End = new DateTime(2020, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Objective Assessment 12",
                            Start = new DateTime(2020, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Lib.Models.ObjectiveAssessmentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyEnd")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyStart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("ObjectiveAssessmentCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentId = 1,
                            CourseId = 1,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 2,
                            AssessmentId = 2,
                            CourseId = 2,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            AssessmentId = 3,
                            CourseId = 3,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 4,
                            AssessmentId = 4,
                            CourseId = 4,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 5,
                            AssessmentId = 5,
                            CourseId = 5,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 6,
                            AssessmentId = 6,
                            CourseId = 6,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 7,
                            AssessmentId = 7,
                            CourseId = 7,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 8,
                            AssessmentId = 8,
                            CourseId = 8,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 9,
                            AssessmentId = 9,
                            CourseId = 9,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 10,
                            AssessmentId = 10,
                            CourseId = 10,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 11,
                            AssessmentId = 11,
                            CourseId = 11,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 12,
                            AssessmentId = 12,
                            CourseId = 12,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Lib.Models.PerformanceAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PerformanceAssessments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2020, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 1",
                            Start = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(2020, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 2",
                            Start = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 3",
                            Start = new DateTime(2020, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(2020, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 4",
                            Start = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            End = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 5",
                            Start = new DateTime(2020, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            End = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 6",
                            Start = new DateTime(2020, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            End = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 7",
                            Start = new DateTime(2020, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            End = new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 8",
                            Start = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            End = new DateTime(2020, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 9",
                            Start = new DateTime(2020, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            End = new DateTime(2020, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 10",
                            Start = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            End = new DateTime(2020, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 11",
                            Start = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            End = new DateTime(2020, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performance Assessment 12",
                            Start = new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Lib.Models.PerformanceAssessmentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyEnd")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyStart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("PerformanceAssessmentCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentId = 1,
                            CourseId = 1,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 2,
                            AssessmentId = 2,
                            CourseId = 2,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            AssessmentId = 3,
                            CourseId = 3,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 4,
                            AssessmentId = 4,
                            CourseId = 4,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 5,
                            AssessmentId = 5,
                            CourseId = 5,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 6,
                            AssessmentId = 6,
                            CourseId = 6,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 7,
                            AssessmentId = 7,
                            CourseId = 7,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 8,
                            AssessmentId = 8,
                            CourseId = 8,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 9,
                            AssessmentId = 9,
                            CourseId = 9,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 10,
                            AssessmentId = 10,
                            CourseId = 10,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 11,
                            AssessmentId = 11,
                            CourseId = 11,
                            NotifyEnd = true,
                            NotifyStart = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 12,
                            AssessmentId = 12,
                            CourseId = 12,
                            NotifyEnd = false,
                            NotifyStart = true,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("Lib.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Term 1",
                            Start = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Term 2",
                            Start = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Term 3",
                            Start = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Term 4",
                            Start = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Lib.Models.TermCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyEnd")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotifyStart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TermId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.ToTable("TermCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            NotifyEnd = true,
                            NotifyStart = false,
                            Status = 0,
                            StudentId = 2,
                            TermId = 2
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            NotifyEnd = false,
                            NotifyStart = true,
                            Status = 0,
                            StudentId = 1,
                            TermId = 3
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            NotifyEnd = true,
                            NotifyStart = false,
                            Status = 0,
                            StudentId = 2,
                            TermId = 4
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            NotifyEnd = false,
                            NotifyStart = true,
                            Status = 0,
                            StudentId = 1,
                            TermId = 1
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            NotifyEnd = true,
                            NotifyStart = false,
                            Status = 0,
                            StudentId = 2,
                            TermId = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            NotifyEnd = false,
                            NotifyStart = true,
                            Status = 0,
                            StudentId = 1,
                            TermId = 3
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            NotifyEnd = true,
                            NotifyStart = false,
                            Status = 0,
                            StudentId = 2,
                            TermId = 4
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            NotifyEnd = false,
                            NotifyStart = true,
                            Status = 0,
                            StudentId = 1,
                            TermId = 1
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            NotifyEnd = true,
                            NotifyStart = false,
                            Status = 0,
                            StudentId = 2,
                            TermId = 2
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            NotifyEnd = false,
                            NotifyStart = true,
                            Status = 0,
                            StudentId = 1,
                            TermId = 3
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 11,
                            NotifyEnd = true,
                            NotifyStart = false,
                            Status = 0,
                            StudentId = 2,
                            TermId = 4
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 12,
                            NotifyEnd = false,
                            NotifyStart = true,
                            Status = 0,
                            StudentId = 1,
                            TermId = 1
                        });
                });

            modelBuilder.Entity("Lib.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith",
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            Email = "instructor.one@example.com",
                            Name = "Instructor One",
                            Phone = "1111111111"
                        },
                        new
                        {
                            Id = 4,
                            Email = "instructor.two@example.com",
                            Name = "Instructor Two",
                            Phone = "2222222222"
                        },
                        new
                        {
                            Id = 5,
                            Email = "instructor.three@example.com",
                            Name = "Instructor Three",
                            Phone = "3333333333"
                        });
                });

            modelBuilder.Entity("Lib.Models.Course", b =>
                {
                    b.HasOne("Lib.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.ObjectiveAssessment", "ObjectiveAssessment")
                        .WithOne("Course")
                        .HasForeignKey("Lib.Models.Course", "ObjectiveAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.PerformanceAssessment", "PerformanceAssessment")
                        .WithOne("Course")
                        .HasForeignKey("Lib.Models.Course", "PerformanceAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("ObjectiveAssessment");

                    b.Navigation("PerformanceAssessment");
                });

            modelBuilder.Entity("Lib.Models.Note", b =>
                {
                    b.HasOne("Lib.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lib.Models.ObjectiveAssessmentCourse", b =>
                {
                    b.HasOne("Lib.Models.ObjectiveAssessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.User", "Student")
                        .WithMany("ObjectiveAssessmentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lib.Models.PerformanceAssessmentCourse", b =>
                {
                    b.HasOne("Lib.Models.PerformanceAssessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.User", "Student")
                        .WithMany("AssessmentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lib.Models.TermCourse", b =>
                {
                    b.HasOne("Lib.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.User", "Student")
                        .WithMany("TermCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lib.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Lib.Models.ObjectiveAssessment", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("Lib.Models.PerformanceAssessment", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("Lib.Models.User", b =>
                {
                    b.Navigation("AssessmentCourses");

                    b.Navigation("ObjectiveAssessmentCourses");

                    b.Navigation("TermCourses");
                });
#pragma warning restore 612, 618
        }
    }
}

on:
  workflow_dispatch:
  pull_request:

jobs:
  build:
    name: "Build & Test"

    # Permissions this GitHub Action needs for other things in GitHub
    permissions: write-all
    runs-on: windows-latest



    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x

      - name: Install maui-android workload
        run: 'dotnet workload install maui-android --temp-dir "${{ runner.temp }}"'

      - name: "Restore/Build/Test"
        run: dotnet test --logger trx --collect:"XPlat Code Coverage"

      - name: Upload Test Result Files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          overwrite: 'true'
          path: ${{ github.workspace }}/**/TestResults/**/*
          retention-days: 5

  publish:
    needs: build
    if: always()
    # Permissions this GitHub Action needs for other things in GitHub
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results
#      - name: Download artifact
#        id: download-artifact
#        uses: dawidd6/action-download-artifact@v6
#        with:
#          # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
#          # Required, if the artifact is from a different repo
#          # Required, if the repo is private a Personal Access Token with `repo` scope is needed or GitHub token in a job where the permissions `action` scope set to `read`
#          github_token: ${{secrets.GITHUB_TOKEN}}
#          # Optional, workflow file name or ID
#          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
#          #         workflow: workflow_name.yml
#          workflow: ci.yaml
#          # If no workflow is set and workflow_search set to true, then the most recent workflow matching
#          # all other criteria will be looked up instead of using the current workflow
#          #          workflow_search: false
#          # Optional, the status or conclusion of a completed workflow to search for
#          # Can be one of a workflow conclusion:
#          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
#          # Or a workflow status:
#          #   "completed", "in_progress", "queued"
#          # Use the empty string ("") to ignore status or conclusion in the search
#          #          workflow_conclusion: success
#          workflow_conclusion: ""
#          # Optional, will get head commit SHA
#          #          pr: ${{github.event.pull_request.number}}
#          # Optional, no need to specify if PR is
#          commit: ${{github.event.pull_request.head.sha}}
#          # Optional, will use the specified branch. Defaults to all branches
#          #          branch: master
#          # Optional, defaults to all types
#          event: push
#          # Optional, will use specified workflow run
#          # use ${{ github.event.workflow_run.id }} when your action runs in a workflow_run event
#          # and wants to download from the triggering workflow run
#          #          run_id: 1122334455
#          # Optional, run number from the workflow
#          #          run_number: 34
#          # Optional, uploaded artifact name,
#          # will download all artifacts if not specified
#          # and extract them into respective subdirectories
#          # https://github.com/actions/download-artifact#download-all-artifacts
#          # is treated as a regular expression if input name_is_regexp is true
#          # will download only those artifacts with a name that matches this regular expression
#          # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions
#          #          name: artifact_name
#          name: "test-results"
#          # Optional, name is treated as a regular expression if set true
#          #          name_is_regexp: true
#          # Optional, a directory where to extract artifact(s), defaults to the current directory
#          #          path: extract_here
#          # Optional, defaults to current repo
#          #          repo: ${{ github.repository }}
#          # Optional, check the workflow run to whether it has an artifact
#          # then will get the last available artifact from the previous workflow
#          # default false, just try to download from the last one
#          #          check_artifacts: false
#          check_artifacts: true
#          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
#          # default false
#          #          search_artifacts: false
#          search_artifacts: true
#          # Optional, choose to skip unpacking the downloaded artifact(s)
#          # default false
#          #          skip_unpack: false
#          # Optional, choose how to exit the action if no artifact is found
#          # can be one of:
#          #  "fail", "warn", "ignore"
#          # default fail
#          #          if_no_artifact_found: fail
#          # Optional, include forks when searching for artifacts
#          # default false
#      #          allow_forks: false
      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@v5.3.9
        with:
          reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
          targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
          reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: "Code Coverage" # Optional title.
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.17.1
        if: always()
        with:
          # NOTE: using trx_files instead of files due to https://github.com/EnricoMi/publish-unit-test-result-action/issues/424
          trx_files: "${{ github.workspace }}/**/*.trx"
